using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SharePointPnP.Modernization.Framework.Telemetry.Observers
{
    /// <summary>
    /// Markdown observer intended for end-user output
    /// </summary>
    public class MarkdownObserver : ILogObserver
    {

        // Cache the logs between calls
        private static readonly Lazy<List<Tuple<LogLevel,LogEntry>>> _lazyLogInstance = new Lazy<List<Tuple<LogLevel, LogEntry>>>(() => new List<Tuple<LogLevel, LogEntry>>());

        private const string Heading1 = "#";
        private const string Heading2 = "##";
        private const string Heading3 = "###";
        private const string UnorderedListItem = "-";

        /// <summary>
        /// Get the single List<LogEntry> instance, singleton pattern
        /// </summary>
        public static List<Tuple<LogLevel, LogEntry>> Logs
        {
            get
            {
                return _lazyLogInstance.Value;
            }
        }

        /// <summary>
        /// Debug level of data not recorded unless in debug mode
        /// </summary>
        /// <param name="entry"></param>
        public void Debug(LogEntry entry)
        {
            #if DEBUG && MEASURE && MEASURE
                Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Error, entry));
            #endif
        }

        /// <summary>
        /// Errors 
        /// </summary>
        /// <param name="entry"></param>
        public void Error(LogEntry entry)
        {
            Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Error, entry));
        }

        /// <summary>
        /// Reporting operations throughout the transform process
        /// </summary>
        /// <param name="entry"></param>
        public void Info(LogEntry entry)
        {
            Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Information, entry));
        }

        /// <summary>
        /// Report on any warnings generated by the reporting tool
        /// </summary>
        /// <param name="entry"></param>
        public void Warning(LogEntry entry)
        {
            Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Warning, entry));
        }

        /// <summary>
        /// Output the report when flush is called
        /// </summary>
        public void Flush()
        {
            StringBuilder report = new StringBuilder();
            report.AppendLine($"{Heading1} Modernisation Report");

            // This could display something cool here e.g. Time taken to transform and transformation options e.g. PageTransformationInformation details

            report.AppendLine($"{Heading2} Transformation Details");

            var heading = "";

            foreach(var log in Logs.Where(l=>l.Item1 == LogLevel.Information).OrderBy(l=>l.Item2.EntryTime))
            {

                if(heading != log.Item2.Heading)
                {
                    report.AppendLine($"{Heading3} {log.Item2.Heading}");
                    heading = log.Item2.Heading;
                }
                
                // Can add 3rd level heading here
                report.AppendLine($"{UnorderedListItem} [{log.Item2.EntryTime}]: {log.Item2.Message}");
            }

            report.AppendLine($"{Heading2} Errors occurred during transformation");

            // Output for now will be a Console Log
            Console.WriteLine(report.ToString());

        }
    }
}
