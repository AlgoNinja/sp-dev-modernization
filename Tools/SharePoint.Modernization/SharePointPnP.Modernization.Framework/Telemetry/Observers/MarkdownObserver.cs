using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SharePointPnP.Modernization.Framework.Telemetry.Observers
{
    /// <summary>
    /// Markdown observer intended for end-user output
    /// </summary>
    public class MarkdownObserver : ILogObserver
    {

        // Cache the logs between calls
        private static readonly Lazy<List<Tuple<LogLevel,LogEntry>>> _lazyLogInstance = new Lazy<List<Tuple<LogLevel, LogEntry>>>(() => new List<Tuple<LogLevel, LogEntry>>());
        private bool _includeDebugEntries;

        /// <summary>
        /// Constructor for specifying to include debug entries
        /// </summary>
        /// <param name="includeDebugEntries">Include Debug Log Entries</param>
        public MarkdownObserver(bool includeDebugEntries = false)
        {
            _includeDebugEntries = includeDebugEntries;

#if DEBUG && MEASURE && MEASURE
                _includeDebugEntries = true; //Override for debugging locally
#endif
        }


        #region Markdown Tokens
        private const string Heading1 = "#";
        private const string Heading2 = "##";
        private const string Heading3 = "###";
        private const string Heading4 = "####";
        private const string Heading5 = "#####";
        private const string Heading6 = "######";
        private const string UnorderedListItem = "-";
        private const string Italic = "_{0}_";
        private const string Bold = "__{0}__";
        private const string BlockQuotes = "> ";
        private const string TableHeaderColumn = "-------------";
        private const string TableColumnSeperator = " | ";
        private const string Link = "[{0}]({1})";
        #endregion

        /// <summary>
        /// Get the single List<LogEntry> instance, singleton pattern
        /// </summary>
        public static List<Tuple<LogLevel, LogEntry>> Logs
        {
            get
            {
                return _lazyLogInstance.Value;
            }
        }

        /// <summary>
        /// Debug level of data not recorded unless in debug mode
        /// </summary>
        /// <param name="entry"></param>
        public void Debug(LogEntry entry)
        {
            if (_includeDebugEntries)
            {
                Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Error, entry));
            }
        }

        /// <summary>
        /// Errors 
        /// </summary>
        /// <param name="entry"></param>
        public void Error(LogEntry entry)
        {
            Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Error, entry));
        }

        /// <summary>
        /// Reporting operations throughout the transform process
        /// </summary>
        /// <param name="entry"></param>
        public void Info(LogEntry entry)
        {
            Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Information, entry));
        }

        /// <summary>
        /// Report on any warnings generated by the reporting tool
        /// </summary>
        /// <param name="entry"></param>
        public void Warning(LogEntry entry)
        {
            Logs.Add(new Tuple<LogLevel, LogEntry>(LogLevel.Warning, entry));
        }

        /// <summary>
        /// Generates a markdown based report based on the logs
        /// </summary>
        /// <returns></returns>
        protected virtual string GenerateReport()
        {
            StringBuilder report = new StringBuilder();
            report.AppendLine($"{Heading1} Modernisation Report");

            // This could display something cool here e.g. Time taken to transform and transformation options e.g. PageTransformationInformation details
            var reportDate = DateTime.Now;
            var allLogs = Logs.OrderBy(l => l.Item2.EntryTime);

            report.AppendLine($"{Heading2} Transformation Details");
            report.AppendLine($"Report date: {reportDate}");
            var logStart = allLogs.First();
            var logEnd = allLogs.Last();
            TimeSpan span = logEnd.Item2.EntryTime.Subtract(logStart.Item2.EntryTime);

            report.AppendLine($"Transform duration: {string.Format("{0:D2}:{1:D2}:{2:D2}", span.Hours, span.Minutes, span.Seconds)}");

            #region Summary Page Transformation Information Settings

            report.AppendLine($"{Heading3} Page Transformation Settings");
            report.AppendLine($"Property {TableColumnSeperator} Setting");
            report.AppendLine($"{TableHeaderColumn} {TableColumnSeperator} {TableHeaderColumn}");

            var transformationSettings = allLogs.Where(l => l.Item2.Heading == LogStrings.Heading_PageTransformationInfomation);
            foreach (var log in transformationSettings)
            {
                var keyValue = log.Item2.Message.Split(new string[] { LogStrings.KeyValueSeperatorToken }, StringSplitOptions.None);
                if (keyValue.Length == 2) //Protect output
                {
                    report.AppendLine($" {keyValue[0] ?? ""} {TableColumnSeperator} {keyValue[1] ?? ""} ");
                }
            }

            #endregion
            
            report.AppendLine($"{Heading2} Transformation Operation Summary");

            #region Transformation Summary

            report.AppendLine($" Date {TableColumnSeperator} Operation {TableColumnSeperator} Actions Performed ");
            report.AppendLine($" {TableHeaderColumn} {TableColumnSeperator} {TableHeaderColumn} {TableColumnSeperator} {TableHeaderColumn} ");

            var logDetails = allLogs.Where(l => l.Item2.Heading != LogStrings.Heading_PageTransformationInfomation &&
                                            l.Item2.Heading != LogStrings.Heading_Summary);
            
            foreach (var log in logDetails.Where(l => l.Item1 == LogLevel.Information || l.Item1 == LogLevel.Warning))
            {
                report.AppendLine($" {log.Item2.EntryTime} {TableColumnSeperator} {log.Item2.Heading} {TableColumnSeperator} {log.Item2.Message} ");
            }

            #endregion

            report.AppendLine($"{Heading3} Errors occurred during transformation");

            #region Report on Errors

            report.AppendLine($" Date {TableColumnSeperator} Operation {TableColumnSeperator} Error Message ");
            report.AppendLine($" {TableHeaderColumn} {TableColumnSeperator} {TableHeaderColumn} {TableColumnSeperator} {TableHeaderColumn} ");

            foreach (var log in logDetails.Where(l => l.Item1 == LogLevel.Error))
            {
                report.AppendLine($" {log.Item2.EntryTime} {TableColumnSeperator} {log.Item2.Heading} {TableColumnSeperator} {log.Item2.Message} ");
            }

            #endregion

            return report.ToString();
        }

        /// <summary>
        /// Output the report when flush is called
        /// </summary>
        public virtual void Flush()
        {
            var report = GenerateReport();

            // Output for now will be a Console Log
            Console.WriteLine(report);

        }
    }
}
